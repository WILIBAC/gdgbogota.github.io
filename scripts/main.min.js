/* global fetch */
/* eslint no-unused-vars: 0 */

'use strict';

/**
 * Usa un API personalizada para obtener datos de meetup.com.
 * @param {string} groupName Nombre del grupo para consultar.
 * @return {object} Una promesa.
 */
function meetupAPIService(groupName) {
  return fetch(`https://diegocoy.com/meetup/events/${groupName}/`).then(response => {
    return response.json();
  })
  .then(data => {
    if (!data.next_event) {
      return false;
    }

    return fetch(`https://diegocoy.com/meetup/events/${groupName}/${data.next_event.id}`).then(eventResponse => {
      return eventResponse.json();
    })
    .catch(err => err);
  })
  .catch(err => err);
}

/* global fetch */
/* eslint no-unused-vars: 0 */

'use strict';

/**
 * Consulta un archivo JSON para obtener infoamción acerca de los organizadores.
 * @return {object} Una promesa.
 */
function organizersService() {
  return fetch(`./organizers.json`).then(response => {
    return response.json();
  });
}

/*!
 *
 *  Web Starter Kit
 *  Copyright 2015 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *    https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
/* eslint-env browser */
(function() {
  'use strict';

  // Check to make sure service workers are supported in the current browser,
  // and that the current page is accessed from a secure origin. Using a
  // service worker from an insecure origin will trigger JS console errors. See
  // http://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features
  var isLocalhost = Boolean(window.location.hostname === 'localhost' ||
      // [::1] is the IPv6 localhost address.
      window.location.hostname === '[::1]' ||
      // 127.0.0.1/8 is considered localhost for IPv4.
      window.location.hostname.match(
        /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
      )
    );

  if ('serviceWorker' in navigator &&
      (window.location.protocol === 'https:' || isLocalhost)) {
    navigator.serviceWorker.register('service-worker.js')
    .then(function(registration) {
      // updatefound is fired if service-worker.js changes.
      registration.onupdatefound = function() {
        // updatefound is also fired the very first time the SW is installed,
        // and there's no need to prompt for a reload at that point.
        // So check here to see if the page is already controlled,
        // i.e. whether there's an existing service worker.
        if (navigator.serviceWorker.controller) {
          // The updatefound event implies that registration.installing is set:
          // https://slightlyoff.github.io/ServiceWorker/spec/service_worker/index.html#service-worker-container-updatefound-event
          var installingWorker = registration.installing;

          installingWorker.onstatechange = function() {
            switch (installingWorker.state) {
              case 'installed':
                // At this point, the old content will have been purged and the
                // fresh content will have been added to the cache.
                // It's the perfect time to display a "New content is
                // available; please refresh." message in the page's interface.
                break;

              case 'redundant':
                throw new Error('The installing ' +
                                'service worker became redundant.');

              default:
                // Ignore
            }
          };
        }
      };
    }).catch(function(e) {
      console.error('Error during service worker registration:', e);
    });
  }
})();

/* global meetupAPIService, organizersService, google */
/* eslint max-len: [1, 130] */
/* eslint-env browser */

(function() {
  'use strict';

  const groupName = 'gdgbogota';

  meetupAPIService(groupName).then(data => {
    if (Boolean(data)) {
      showNextEvent(data);
    }
  });

  showOrganizers();

  /**
   * Muestra los datos del siguiente evento.
   * @param {object} eventObj El objeto del evento.
   */
  function showNextEvent(eventObj) {
    // Referencias a elementos del DOM
    const nextEventContainer = document.querySelector('.next-event-container');
    const eventDescrTitle = document.querySelector('.event-description>h3');
    const eventDescrText = document.querySelector('.event-description>p');
    const eventSpeaker = document.querySelector('.event-description>.event-speaker');

    // Expresiones regulares para obtener el texto deseado a partir de la descripción del evento
    const speakerRegex = new RegExp(/([Aa] cargo|[Aa] cargo de|speaker|[Oo]rador|[Pp]or)(?:\:\s)(.+)(?=[.,;_\-()\n\b]\s)/g);
    const descrTextRegex = new RegExp(/(<p>(?!<)).+?(?=<)/g);

    // Escritura sobre elementos del DOM
    eventDescrTitle.innerText = eventObj.name;
    eventDescrText.innerHTML = eventObj.description.match(descrTextRegex)[0];
    eventSpeaker.innerText = eventObj.description.match(speakerRegex);

    nextEventContainer.style.display = 'block';

    initMap(eventObj.venue.lat, eventObj.venue.lon, eventObj.name);
  }

  /**
   * Inicia el mapa.
   * @param {int} lat Latitud del lugar del en donde se realizará evento.
   * @param {int} lng Longitud del lugar del en donde se realizará evento.
   * @param {string} eventName El nombre del evento, se mostrará como tooltip en el marcador (opcional).
   */
  function initMap(lat, lng, eventName) {
    // Mapa centrado sobre el lugar del evento
    let map = new google.maps.Map(document.getElementById('map-container'), {
      center: {lat: lat, lng: lng},
      zoom: 16
    });

    // Marcador del lugar del evento
    new google.maps.Marker({ // eslint-disable-line
      position: {lat: lat, lng: lng},
      map: map,
      title: eventName || 'Lugar del evento'
    });
  }

  /**
   * Obtiene la lista de organizadores y creea un elemento del DOM para cada uno.
   */
  function showOrganizers() {
    let organizersSection = document.querySelector('.organizers');
    organizersSection.style.display = 'none';

    organizersService().then(data => {
      data.forEach(o => {
        let organizersContainer = document.querySelector('.organizers-container');

        let organizerElement = document.createElement('a');
        let organizerImg = document.createElement('img');
        let organizerName = document.createElement('h3');

        const urlRegExp = (/(^(?:(http|https):|([Ww]{3}))\.)|(?:\w+\.)(\w{2,4})\/.+/g);
        let isRemotePic = Boolean(o.pic.match(urlRegExp));

        organizerElement.classList.add('organizer');
        organizerImg.classList.add('organizer-pic');
        organizerName.classList.add('organizer-name');

        organizerElement.setAttribute('href', o.social.filter(e => e.network === o.linkTo)[0].url || '#');
        organizerImg.setAttribute('src', (isRemotePic ? o.pic : `./images/${o.pic}`));
        organizerImg.alt = o.name;
        organizerImg.setAttribute('aria-label', `Foto de ${o.name}`);
        organizerName.innerText = o.name;
        organizerName.setAttribute('aria-label', o.name);

        organizerElement.appendChild(organizerImg);
        organizerElement.appendChild(organizerName);

        organizersContainer.appendChild(organizerElement);
      });
    });

    organizersSection.style.display = 'block';
  }
})();

